{"$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","version":"2.1.0","runs":[{"tool":{"driver":{"name":"Checkmarx - SAST","organization":"Checkmarx - SAST","semanticVersion":"1.0.0","rules":[{"id":"Reflected_XSS_All_Clients","name":"Reflected_XSS_All_Clients","shortDescription":{"text":"Reflected_XSS_All_Clients"},"fullDescription":{"text":"Reflected_XSS_All_Clients"},"help":{"text":"https://ast.dev.checkmarx-ts.com/CxWebClient/ScanQueryDescription.aspx?queryID=591&queryVersionCode=56121123&queryTitle=Reflected_XSS_All_Clients","markdown":"[Reflected_XSS_All_Clients Details](https://ast.dev.checkmarx-ts.com/CxWebClient/ScanQueryDescription.aspx?queryID=591&queryVersionCode=56121123&queryTitle=Reflected_XSS_All_Clients)"},"properties":{"tags":["security","external/cwe/cwe-79"],"precision":""}},{"id":"SQL_Injection","name":"SQL_Injection","shortDescription":{"text":"SQL_Injection"},"fullDescription":{"text":"SQL_Injection"},"help":{"text":"https://ast.dev.checkmarx-ts.com/CxWebClient/ScanQueryDescription.aspx?queryID=594&queryVersionCode=56142311&queryTitle=SQL_Injection","markdown":"[SQL_Injection Details](https://ast.dev.checkmarx-ts.com/CxWebClient/ScanQueryDescription.aspx?queryID=594&queryVersionCode=56142311&queryTitle=SQL_Injection)"},"properties":{"tags":["security","external/cwe/cwe-89"],"precision":""}},{"id":"Second_Order_SQL_Injection","name":"Second_Order_SQL_Injection","shortDescription":{"text":"Second_Order_SQL_Injection"},"fullDescription":{"text":"Second_Order_SQL_Injection"},"help":{"text":"https://ast.dev.checkmarx-ts.com/CxWebClient/ScanQueryDescription.aspx?queryID=593&queryVersionCode=56142312&queryTitle=Second_Order_SQL_Injection","markdown":"[Second_Order_SQL_Injection Details](https://ast.dev.checkmarx-ts.com/CxWebClient/ScanQueryDescription.aspx?queryID=593&queryVersionCode=56142312&queryTitle=Second_Order_SQL_Injection)"},"properties":{"tags":["security","external/cwe/cwe-89"],"precision":""}},{"id":"Stored_XSS","name":"Stored_XSS","shortDescription":{"text":"Stored_XSS"},"fullDescription":{"text":"Stored_XSS"},"help":{"text":"https://ast.dev.checkmarx-ts.com/CxWebClient/ScanQueryDescription.aspx?queryID=595&queryVersionCode=56163505&queryTitle=Stored_XSS","markdown":"[Stored_XSS Details](https://ast.dev.checkmarx-ts.com/CxWebClient/ScanQueryDescription.aspx?queryID=595&queryVersionCode=56163505&queryTitle=Stored_XSS)"},"properties":{"tags":["security","external/cwe/cwe-79"],"precision":""}}]}},"results":[{"ruleId":"Stored_XSS","level":"error","message":{"text":"Method stmt.executeQuery at line 91 of root\\header.jsp gets data from the database, for the rs element. This element&#8217;s value then flows through the code without being properly filtered or encoded and is eventually displayed to the user in method out.println at line 94 of root\\header.jsp. This may enable a Stored Cross-Site-Scripting attack.            \n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"root/header.jsp"},"region":{"startLine":91,"endLine":91}}}]},{"ruleId":"Stored_XSS","level":"error","message":{"text":"Method stmt.executeQuery at line 16 of root\\admin.jsp gets data from the database, for the rs element. This element&#8217;s value then flows through the code without being properly filtered or encoded and is eventually displayed to the user in method out.println at line 21 of root\\admin.jsp. This may enable a Stored Cross-Site-Scripting attack.            \n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"root/admin.jsp"},"region":{"startLine":16,"endLine":16}}},{"physicalLocation":{"artifactLocation":{"uri":"root/admin.jsp"},"region":{"startLine":28,"endLine":28}}}]},{"ruleId":"Stored_XSS","level":"error","message":{"text":"Method stmt.executeQuery at line 242 of root\\basket.jsp gets data from the database, for the rs element. This element&#8217;s value then flows through the code without being properly filtered or encoded and is eventually displayed to the user in method out.println at line 257 of root\\basket.jsp. This may enable a Stored Cross-Site-Scripting attack.            \n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"root/basket.jsp"},"region":{"startLine":242,"endLine":242}}}]},{"ruleId":"Stored_XSS","level":"error","message":{"text":"Method stmt.executeQuery at line 63 of root\\contact.jsp gets data from the database, for the rs element. This element&#8217;s value then flows through the code without being properly filtered or encoded and is eventually displayed to the user in method out.println at line 68 of root\\contact.jsp. This may enable a Stored Cross-Site-Scripting attack.            \n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"root/contact.jsp"},"region":{"startLine":63,"endLine":63}}}]},{"ruleId":"Stored_XSS","level":"error","message":{"text":"Method stmt.executeQuery at line 25 of root\\home.jsp gets data from the database, for the rs element. This element&#8217;s value then flows through the code without being properly filtered or encoded and is eventually displayed to the user in method out.println at line 31 of root\\home.jsp. This may enable a Stored Cross-Site-Scripting attack.            \n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"root/home.jsp"},"region":{"startLine":25,"endLine":25}}}]},{"ruleId":"Stored_XSS","level":"error","message":{"text":"Method stmt.executeQuery at line 42 of root\\product.jsp gets data from the database, for the rs element. This element&#8217;s value then flows through the code without being properly filtered or encoded and is eventually displayed to the user in method out.println at line 49 of root\\product.jsp. This may enable a Stored Cross-Site-Scripting attack.            \n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"root/product.jsp"},"region":{"startLine":42,"endLine":42}}},{"physicalLocation":{"artifactLocation":{"uri":"root/product.jsp"},"region":{"startLine":59,"endLine":59}}}]},{"ruleId":"Stored_XSS","level":"error","message":{"text":"Method stmt.executeQuery at line 14 of root\\score.jsp gets data from the database, for the rs element. This element&#8217;s value then flows through the code without being properly filtered or encoded and is eventually displayed to the user in method out.println at line 19 of root\\score.jsp. This may enable a Stored Cross-Site-Scripting attack.            \n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"root/score.jsp"},"region":{"startLine":14,"endLine":14}}}]},{"ruleId":"Stored_XSS","level":"error","message":{"text":"Method stmt.executeQuery at line 15 of root\\login.jsp gets data from the database, for the rs element. This element&#8217;s value then flows through the code without being properly filtered or encoded and is eventually displayed to the user in method value=&quot;&quot;/&gt; at line 89 of root\\contact.jsp. This may enable a Stored Cross-Site-Scripting attack.            \n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"root/login.jsp"},"region":{"startLine":15,"endLine":15}}}]},{"ruleId":"Stored_XSS","level":"error","message":{"text":"Method stmt.executeQuery at line 34 of root\\search.jsp gets data from the database, for the rs element. This element&#8217;s value then flows through the code without being properly filtered or encoded and is eventually displayed to the user in method %&gt; at line 49 of root\\search.jsp. This may enable a Stored Cross-Site-Scripting attack.            \n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"root/search.jsp"},"region":{"startLine":34,"endLine":34}}}]},{"ruleId":"SQL_Injection","level":"error","message":{"text":"The application's stmt.executeQuery method executes an SQL query with executeQuery, at line 166 of root\\basket.jsp. The application constructs this SQL query by embedding an untrusted string into the query without proper sanitization. The concatenated string is submitted to the database, where it is parsed and executed accordingly.\nThe attacker would be able to inject arbitrary data into the SQL query, by simply altering the user input getValue, which is read by the cookie.getValue method at line 43 of root\\basket.jsp. This input then flows through the code to the database server, without sanitization.\nThis may enable an SQL Injection attack.\n\n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"root/basket.jsp"},"region":{"startLine":148,"endLine":148}}},{"physicalLocation":{"artifactLocation":{"uri":"root/basket.jsp"},"region":{"startLine":212,"endLine":212}}},{"physicalLocation":{"artifactLocation":{"uri":"root/basket.jsp"},"region":{"startLine":38,"endLine":38}}},{"physicalLocation":{"artifactLocation":{"uri":"root/basket.jsp"},"region":{"startLine":43,"endLine":43}}}]},{"ruleId":"SQL_Injection","level":"error","message":{"text":"The application's stmt.executeQuery method executes an SQL query with executeQuery, at line 15 of root\\login.jsp. The application constructs this SQL query by embedding an untrusted string into the query without proper sanitization. The concatenated string is submitted to the database, where it is parsed and executed accordingly.\nThe attacker would be able to inject arbitrary data into the SQL query, by simply altering the user input &quot;&quot;password&quot;&quot;, which is read by the = method at line 8 of root\\login.jsp. This input then flows through the code to the database server, without sanitization.\nThis may enable an SQL Injection attack.\n\n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"root/login.jsp"},"region":{"startLine":35,"endLine":35}}},{"physicalLocation":{"artifactLocation":{"uri":"root/login.jsp"},"region":{"startLine":8,"endLine":8}}},{"physicalLocation":{"artifactLocation":{"uri":"root/login.jsp"},"region":{"startLine":40,"endLine":40}}}]},{"ruleId":"SQL_Injection","level":"error","message":{"text":"The application's stmt.executeQuery method executes an SQL query with executeQuery, at line 24 of root\\password.jsp. The application constructs this SQL query by embedding an untrusted string into the query without proper sanitization. The concatenated string is submitted to the database, where it is parsed and executed accordingly.\nThe attacker would be able to inject arbitrary data into the SQL query, by simply altering the user input &quot;&quot;password1&quot;&quot;, which is read by the = method at line 10 of root\\password.jsp. This input then flows through the code to the database server, without sanitization.\nThis may enable an SQL Injection attack.\n\n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"root/password.jsp"},"region":{"startLine":10,"endLine":10}}}]},{"ruleId":"SQL_Injection","level":"error","message":{"text":"The application's stmt.executeQuery method executes an SQL query with executeQuery, at line 29 of root\\register.jsp. The application constructs this SQL query by embedding an untrusted string into the query without proper sanitization. The concatenated string is submitted to the database, where it is parsed and executed accordingly.\nThe attacker would be able to inject arbitrary data into the SQL query, by simply altering the user input &quot;&quot;password1&quot;&quot;, which is read by the = method at line 7 of root\\register.jsp. This input then flows through the code to the database server, without sanitization.\nThis may enable an SQL Injection attack.\n\n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"root/register.jsp"},"region":{"startLine":51,"endLine":51}}},{"physicalLocation":{"artifactLocation":{"uri":"root/register.jsp"},"region":{"startLine":7,"endLine":7}}},{"physicalLocation":{"artifactLocation":{"uri":"root/register.jsp"},"region":{"startLine":46,"endLine":46}}}]},{"ruleId":"Reflected_XSS_All_Clients","level":"error","message":{"text":"Method = at line 11 of root\\contact.jsp gets user input for the &quot;&quot;comments&quot;&quot; element. This element&#8217;s value then flows through the code without being properly sanitized or validated and is eventually displayed to the user in method out.println at line 37 of root\\contact.jsp. This may enable a Cross-Site-Scripting attack.      \n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"root/contact.jsp"},"region":{"startLine":11,"endLine":11}}}]},{"ruleId":"Reflected_XSS_All_Clients","level":"error","message":{"text":"Method = at line 10 of root\\search.jsp gets user input for the &quot;&quot;q&quot;&quot; element. This element&#8217;s value then flows through the code without being properly sanitized or validated and is eventually displayed to the user in method %&gt;&lt;br/&gt;&lt;br/&gt; at line 18 of root\\search.jsp. This may enable a Cross-Site-Scripting attack.      \n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"root/search.jsp"},"region":{"startLine":10,"endLine":10}}}]},{"ruleId":"Reflected_XSS_All_Clients","level":"error","message":{"text":"Method request.getCookies at line 38 of root\\basket.jsp gets user input for the getCookies element. This element&#8217;s value then flows through the code without being properly sanitized or validated and is eventually displayed to the user in method out.println at line 141 of root\\basket.jsp. This may enable a Cross-Site-Scripting attack.      \n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"root/basket.jsp"},"region":{"startLine":38,"endLine":38}}}]},{"ruleId":"Reflected_XSS_All_Clients","level":"error","message":{"text":"Method request.getCookies at line 35 of root\\login.jsp gets user input for the getCookies element. This element&#8217;s value then flows through the code without being properly sanitized or validated and is eventually displayed to the user in method out.println at line 78 of root\\login.jsp. This may enable a Cross-Site-Scripting attack.      \n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"root/login.jsp"},"region":{"startLine":35,"endLine":35}}}]},{"ruleId":"Reflected_XSS_All_Clients","level":"error","message":{"text":"Method request.getCookies at line 46 of root\\register.jsp gets user input for the getCookies element. This element&#8217;s value then flows through the code without being properly sanitized or validated and is eventually displayed to the user in method out.println at line 96 of root\\register.jsp. This may enable a Cross-Site-Scripting attack.      \n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"root/register.jsp"},"region":{"startLine":46,"endLine":46}}}]},{"ruleId":"Second_Order_SQL_Injection","level":"error","message":{"text":"The application's stmt.executeQuery method executes an SQL query with BinaryExpr, at line 24 of root\\password.jsp. The application constructs this SQL query by embedding an untrusted string into the query without proper sanitization. The concatenated string is submitted to the database, where it is parsed and executed accordingly.\nThe attacker may be able to write arbitrary data to the database, which is then retrieved by the application with rs in stmt.executeQuery method at line 15 of root\\login.jsp. This data then flows through the code, until it is used directly in the SQL query without sanitization, and then submitted to the database server for execution.\nThis may enable a Second-Order SQL Injection attack.\n\n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"root/login.jsp"},"region":{"startLine":15,"endLine":15}}}]}]}]}